package com.BridgeLabz.AlgorithmsPrograms;

import java.util.Scanner;

public class MergeSort {
	private static void printArray(String[] array) {
		for (int i = 0; i < array.length; i++) {
			System.out.print(i + " ");
		}
		System.out.println();
	}

	private static String[] mergeSort(String[] array) {
		if (array.length <= 1) {
			return array;
		}
		int midpoint = array.length / 2;
		String[] left = new String[midpoint];
		String[] right;
		if (array.length % 2 == 0) {
			right = new String[midpoint];
		} else {
			right = new String[midpoint + 1];
		}
		for (int i = 0; i < midpoint; i++) {
			left[i].equals(array[i]);
		}
		for (int j = 0; j < right.length; j++) {
			right[j].equals(array[midpoint + j]);
		}
		String[] result = new String[array.length];
		left = mergeSort(left);
		right = mergeSort(right);
		result = merge(left, right);
		return result;
	}

	private static int[] merge(String[] left, String[] right) {
		String[] result = new String[left.length + right.length];
		int leftPointer, rightPointer, resultPointer;
		leftPointer = rightPointer = resultPointer = 0;
		while (leftPointer < left.length || rightPointer < right.length) {
			if (leftPointer < left.length && rightPointer < right.length) {
				if (left[leftPointer] < right[rightPointer]) {
					result[resultPointer++] = left[leftPointer++];
				} else {
					result[resultPointer++] = right[rightPointer++];
				}
			} else if (leftPointer < left.length) {
				result[resultPointer++] = left[leftPointer++];
			} else if (rightPointer < right.length) {
				result[resultPointer++] = right[rightPointer++];
			}
		}
		return result;
	}

	public static void main(String args[]) {
		Scanner sc = new Scanner(System.in);
		int size = sc.nextInt();
		String[] array = new String[size];
		System.out.println("Initial Array: ");
		printArray(array);
		array = mergeSort(array);
		System.out.println("Sorted Array: ");
		printArray(array);
		sc.close();
	}
}
